- name: Put ssh private key onto server
  copy:
    src: "{{ ssh_key_file }}"
    dest: /home/{{ ansible_user_id }}/.ssh/id_rsa
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0700
  when: (ansible_ssh_user != "root")

- name: Put ssh private key onto server
  copy:
    src: "{{ ssh_key_file }}"
    dest: /root/.ssh/id_rsa
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0700
  when: (ansible_ssh_user == "root")

- name: Get groups for ssh user
  command: groups {{ ansible_ssh_user }}
  register: my_groups

- name: Add wallaroo group
  group: name=wallaroo state=present gid=1111

- name: Add wallaroo user
  user:
    name: wallaroo
    uid: 1111
    group: wallaroo
    shell: /bin/bash
    groups: "{{ my_groups.stdout.split(':')[1] | replace(' ', ',') }}"

- name: Copy ssh keys for wallaroo user
  command: creates=/home/wallaroo/.ssh cp -rf /home/{{ ansible_user_id }}/.ssh /home/wallaroo/
  when: (ansible_ssh_user != "root")

- name: Copy ssh keys for wallaroo user
  command: creates=/home/wallaroo/.ssh cp -rf /root/.ssh /home/wallaroo/
  when: (ansible_ssh_user == "root")

- name: Change ownership ssh keys for wallaroo user
  file: path=/home/wallaroo/.ssh owner=wallaroo group=wallaroo recurse=yes state=directory

- name: allow wallaroo user to sudo without password
  lineinfile:
    dest: /etc/sudoers
    regexp: '^wallaroo'
    line: 'wallaroo ALL=(ALL) NOPASSWD:ALL'
    state: present
    backup: true

- name: Install common packages
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
   - curl
   - libpcap0.8
   - python-boto
   - python-pip
   - python3
   - python3-pip
   - python3-numpy
   - less
   - dnsutils
   - net-tools
   - vim
   - wget
   - jq
   - sysstat
   - htop
   - numactl
   - cpuset
   - trace-cmd
   - stress-ng

- name: Install common packages
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
   - linux-tools-{{ ansible_kernel }}
  ignore_errors: yes

- name: Install python3 click
  pip: name=click executable=pip3

- name: Check if ptpd is installed
  stat: path=/usr/sbin/ptpd
  register: ptpd

- name: Get ptpd deb for armhf
  get_url:
     url: https://github.com/WallarooLabs/ptpd/releases/download/ptpd_2.3.2-master/ptpd_2.3.2-master-1_armhf.deb
     dest: /tmp/ptpd_2.3.2-master-1_armhf.deb
     mode: 0755
  register: get_url_result
  until: get_url_result | succeeded
  retries: 5
  delay: 5
  when: ('arm' == '{{ ansible_architecture[0:3] }}') and (not ptpd.stat.exists)

- name: Install ptp for armhf
  apt: deb=/tmp/ptpd_2.3.2-master-1_armhf.deb
  when: ('arm' == '{{ ansible_architecture[0:3] }}') and (not ptpd.stat.exists)

- name: Get ptpd deb for x86_64
  get_url:
     url: https://github.com/WallarooLabs/ptpd/releases/download/ptpd_2.3.2-master/ptpd_2.3.2-master-1_amd64.deb
     dest: /tmp/ptpd_2.3.2-master-1_amd64.deb
     mode: 0755
  register: get_url_result
  until: get_url_result | succeeded
  retries: 5
  delay: 5
  when: (ansible_architecture == "x86_64") and (not ptpd.stat.exists)

- name: Install ptp for x86_64
  apt: deb=/tmp/ptpd_2.3.2-master-1_amd64.deb
  when: (ansible_architecture == "x86_64") and (not ptpd.stat.exists)

- name: add llvm apt repo key
  apt_key:
    url: 'http://apt.llvm.org/llvm-snapshot.gpg.key'
    state: present
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: add llvm apt repo
  apt_repository:
    repo: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main'
    state: present
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: add llvm src apt repo
  apt_repository:
    repo: 'deb-src http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main'
    state: present
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: Install dev packages
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
   - automake
   - autotools-dev
   - build-essential
   - file
   - git
   - libicu-dev
   - libncurses5-dev
   - libpcre3
   - libssl-dev
   - libxml2-dev
   - zlib1g-dev
   - llvm-3.9
   - libpcre2-dev
   - libsnappy-dev
   - liblz4-dev
   - python-dev
   - software-properties-common
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: download ponyc
  git:
    repo: https://github.com/ponylang/ponyc
    dest: /src/ponyc
    clone: yes
    force: yes
    version: master
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: checkout to latest ponyc release
  shell: git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
  args:
    chdir: /src/ponyc
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: compile and install latest ponyc release
  command: sudo LLVM_CONFIG=/usr/lib/llvm-3.9/bin/llvm-config make config=release install
  args:
    chdir: /src/ponyc
    creates: /src/ponyc/build
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: download pony-stable
  git:
    repo: https://github.com/ponylang/pony-stable
    dest: /src/pony-stable
    clone: yes
    force: yes
    version: master
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: checkout to latest pony-stable release
  shell: git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
  args:
    chdir: /src/pony-stable
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: compile and install latest pony-stable release
  shell: make && sudo make config=release install
  args:
    chdir: /src/pony-stable
    creates: /src/pony-stable/bin
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: download go-1.9.4
  get_url:
     url: https://dl.google.com/go/go1.9.4.linux-amd64.tar.gz
     dest: /tmp/go1.9.4.linux-amd64.tar.gz
     checksum: sha256:15b0937615809f87321a457bb1265f946f9f6e736c563d6c5e0bd2c22e44f779
     mode: 0755
  register: get_url_result
  until: get_url_result | succeeded
  retries: 5
  delay: 5
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: Extract go1.9.4.linux-amd64.tar.gz into /usr/local
  unarchive:
    src: /tmp/go1.9.4.linux-amd64.tar.gz
    dest: /usr/local
    copy: no
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: Add /usr/local/go/bin dir to system-wide $PATH.
  copy:
    dest: /etc/profile.d/go-1.9.4-path.sh
    content: 'PATH=$PATH:/usr/local/go/bin'
  when: ({{ install_devtools is defined }} and {{ install_devtools == 'true' }})

- name: create cpu shield
  script: create_cpu_shield.sh {{ system_cpus if system_cpus is defined else "" }} > /create_cpu_shield.out
  when: ('vagrant' != '{{ ansible_ssh_user }}' and '{{ provider }}' != 'azure')

- name: create cpu shield in azure
  script: create_cpu_shield_azure.sh {{ system_cpus if system_cpus is defined else "" }} > /create_cpu_shield.out
  when: ('vagrant' != '{{ ansible_ssh_user }}' and '{{ provider }}' == 'azure')

- name: apply kernel tweaks
  script: kerneltweaks.sh > /kerneltweaks.out
  when: ('vagrant' != '{{ ansible_ssh_user }}' and '{{ provider }}' != 'azure')

- name: apply azure kernel tweaks
  script: kerneltweaks_azure.sh > /kerneltweaks.out
  when: ({{ provider is defined }} and {{ provider == 'azure' }})
